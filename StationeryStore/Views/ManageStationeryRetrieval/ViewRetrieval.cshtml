@*Janel*@

@using StationeryStore.Models
@using StationeryStore.Util

@model List<StationeryStore.Models.RetrievalItemDTO>
@{
    StationeryRetrievalEF retrieval = (StationeryRetrievalEF)ViewData["retrieval"];
}
<div>@Html.Partial("_Store")</div>

<div class="mainview">
    <h3>View Stationery Retrieval</h3>
    <br />

    @using (Html.BeginForm("SaveRetrieval", "ManageStationeryRetrieval", FormMethod.Post))
    {
        <table align="center">
            <tr>
                <td class="details">Retrieval Id </td>
                <td>@retrieval.RetrievalId</td>
            </tr>
            <tr>
                <td class="details">Retrieval Date </td>
                <td>@Timestamp.dateFromTimestamp(retrieval.DateRetrieved)</td>
            </tr>
            <tr>
                <td class="details">Disbursement Date </td>
                @if (retrieval.Status == "Processing")
                {
                    <td><input type="date" name="disbursementDate" value="@DateTime.Today.AddDays(3).ToString("yyyy-MM-dd")" /></td>
                }
                else
                {
                    <td>@Timestamp.dateFromTimestamp((long)retrieval.StationeryDisbursements.ElementAt(0).DateDisbursed)</td>
                }
            </tr>
        </table>
        <br />
        <div class="listview">
            <table class="listview">
                <tr class="listview">
                    <td class="listviewuom">Bin</td>
                    <td class="listviewuom">Item Code</td>
                    <td class="listviewdescription">Item Description</td>
                    <td class="listviewheader">Total Requested Quantity</td>
                    <td class="listviewheader">Total Retrieved Quantity</td>
                </tr>
                @for (var i = 0; i < Model.Count; i++)
                {
                    <tr class="listview">
                        <td class="oddlistview">@Html.Raw(Model[i].Bin)</td>
                        <td class="oddlistview">@Html.DisplayFor(x => x[i].ItemCode)</td>
                        <td class="oddlistview">@Html.Raw(Model[i].ItemDescription)</td>
                        <td class="oddlistview">@Html.DisplayFor(x => x[i].TotalOutstandingQty)</td>
                        @if (retrieval.Status != "Retrieved")
                        {
                            <td class="oddlistview">
                                @Html.EditorFor(x => x[i].RetrievedQty, new { htmlAttributes = new { min = 0, max = Model[i].TotalOutstandingQty } })
                                @Html.ValidationMessageFor(x => x[i].RetrievedQty)
                            </td>
                        }
                        else
                        {
                            <td class="oddlistview">@Html.DisplayFor(x => x[i].RetrievedQty)</td>
                        }
                        <td>@Html.HiddenFor(x => x[i].ItemCode)</td>
                        <td>@Html.HiddenFor(x => x[i].TotalOutstandingQty)</td>
                        <td><input type="hidden" name="retrievalId" value="@retrieval.RetrievalId" /></td>
                    </tr>
                }
                @if (retrieval.Status != "Retrieved")
                {
                    <tr class="decision">
                        <td class="decision" colspan="5" align="right">
                            <input type="submit" class="decision" name="decision" value="Cancel" />
                            <input type="submit" class="decision" name="decision" value="Save" onclick="return confirm('Confirm retrieval quantities?')" />
                        </td>
                    </tr>
                }
                else
                {
                    <tr class="decision">
                        <td class="decision" colspan="5" align="right">
                            <input type="button" class="decision" value="Back" onclick="location.href='@Url.Action("ViewRetrievalHistory", "ManageStationeryRetrieval", new { page = 1 })'" />
                        </td>
                    </tr>
                }

            </table>
        </div>
    }
    <br /><br />
</div>

<style>
    .field-validation-error {
        color: #ff0000;
    }
</style>