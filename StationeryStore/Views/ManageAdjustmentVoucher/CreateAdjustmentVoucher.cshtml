@model List<StationeryStore.Models.AdjustmentVoucherDetailsDTO>
@using StationeryStore.Models
@using StationeryStore.Util

@{
    ViewBag.Title = "CreateAdjustmentVoucher";
    List<StockEF> itemList = (List<StockEF>)ViewData["itemList"];
    AdjustmentVoucherEF voucher = (AdjustmentVoucherEF)ViewData["voucher"];
}

<div>@Html.Partial("_Store")</div>

<div class="maindetails">
    <h3 class="title">Edit Adjustment Voucher</h3>
    <div class="mainview">
        @using (Html.BeginForm("CreateAdjustmentVoucher", "ManageAdjustmentVoucher", FormMethod.Post))
        {
            if (voucher != null && voucher.VoucherId != null)
            {
                <table>
                    <tr>
                        <td class="listrequestlabel">Voucher Id:</td>
                        <td class="listrequestvalue">@voucher.VoucherId</td>
                    </tr>
                    <tr>
                        <td class="listrequestlabel">Requester:</td>
                        <td class="listrequestvalue">@voucher.Requester.Name</td>
                    </tr>
                </table>
                <input type="hidden" name="voucherId" value="@voucher.VoucherId" />
            }
            <p>Add items to adjustment voucher.</p>

            <input list="items" name="itemToAdd" />
            <datalist id="items">
                @{foreach (var item in itemList)
                    {
                        string itemDetail = item.ItemCode + "- " + item.Description;
                        <option value="@item.ItemCode">@itemDetail</option>
                    }
                }
            </datalist>
            <input class="decision" type="submit" value="Add Item" name="choice" />
            <br />
            <br />
            <table class="listview">
                <tr>
                    <th class="listviewheader">S/N</th>
                    <th class="listviewheader">Item Code</th>
                    <th class="listviewheader">Description</th>
                    <th class="listviewheader">Quantity Adjusted</th>
                    <th class="listviewheader">Unit Cost</th>
                    <th class="listviewheader">Subtotal</th>
                    <th class="listviewheader">Reason</th>
                    <th class="listviewheader">Remove</th>
                </tr>
                @if (Model == null)
                {
                    <tr class="oddlistview">
                        <td colspan="6" class="oddlistview">Please Add Items.</td>
                    </tr>
                }
                else
                {
                    List<double> prices = new List<double>();

                    for (int i = 0; i < Model.Count; i++)
                    {
                        int count = i + 1;
                        double itemSubtotal = Model[i].Price * Model[i].Quantity;
                        
                        <tr class="oddlistview">
                            <td class="oddlistview">@count</td>
                            <td class="oddlistview">@Html.Raw(Model[i].ItemCode)</td>
                            <td class="oddlistview">@Html.Raw(Model[i].Description)</td>
                            <td class="oddlistview" id="quantity-@i ">@Html.EditorFor(x => x[i].Quantity, new { htmlAttributes = new { onchange = "changeQty(`@itemSubtotal`)" } })<br />@Html.ValidationMessageFor(x => Model[i].Quantity)</td>
                            <td class="oddlistview" id="price-@i" >@Html.DisplayFor(x => x[i].Price)</td>
                            <td class="oddlistview" id="subtotal-@i"></td>
                            <td class="oddlistview">@Html.EditorFor(x => x[i].Reason)<br />@Html.ValidationMessageFor(x => Model[i].Reason)</td>
                            <td class="oddlistview">@Html.CheckBoxFor(x => x[i].Remove)</td>

                            @Html.HiddenFor(x => x[i].Remove, Model[i].Remove)
                            @Html.HiddenFor(x => x[i].ItemCode, Model[i].ItemCode)
                            @Html.HiddenFor(x => x[i].Description, Model[i].Description)
                            @Html.HiddenFor(x => x[i].Reason, Model[i].Reason)
                            @Html.HiddenFor(x => x[i].Quantity, Model[i].Quantity)
                            @Html.HiddenFor(x => x[i].Price, Model[i].Price)
                        </tr>
                    }

                    <tr>
                        <td colspan="7" class="oddlistview">Total Value:</td>
                        <td id="totalSum" class="oddlistview">@string.Format("{0:C}", Model.Sum(x => x.Price * x.Quantity))</td>
                    </tr>
                }

            </table>
            <br />
            <button onclick="location.href='@Url.Action("Index", "ManageAdjustment")'" name="choice" value="Cancel" class="decision">Cancel</button>
            <input class="decision" type="submit" value="Submit" name="choice" />
            <input class="decision" type="submit" value="Remove" name="choice" />

        }
    </div>
</div>
<script type="text/javascript">
    var prices = [];

    function changeQty(i) {
        
        alert(i);
    }
</script>